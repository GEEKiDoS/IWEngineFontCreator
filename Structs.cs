using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IWEngine
{
    public partial class Font
    {
        [JsonProperty("fontName")]
        public string FontName { get; set; }

        [JsonProperty("glowMaterial")]
        public string GlowMaterial { get; set; }

        [JsonProperty("material")]
        public string Material { get; set; }

        [JsonProperty("pixelHeight")]
        public int PixelHeight { get; set; }

        [JsonProperty("glyphCount")]
        public int GlyphCount { get; set; }

        [JsonProperty("glyphs")]
        public List<Glyph> Glyphs { get; set; }

        public void Write(BinaryWriter bw)
        {
            bw.Write(0); //font name offset
            bw.Write(PixelHeight);
            bw.Write(GlyphCount);
            bw.Write(0); //font material offset

            foreach (var glyph in Glyphs)
            {
                bw.Write(glyph.Letter);
                bw.Write(glyph.X0);
                bw.Write(glyph.Y0);
                bw.Write(glyph.Dx);
                bw.Write(glyph.PixelWidth);
                bw.Write(glyph.PixelHeight);
                bw.Write((byte)0);
                bw.Write(glyph.S0);
                bw.Write(glyph.T0);
                bw.Write(glyph.S1);
                bw.Write(glyph.T1);
            }

            int nameOffset = (int)bw.BaseStream.Position;
            bw.Write(Encoding.Default.GetBytes(FontName));
            bw.Write(0);
            int matOffset = (int)bw.BaseStream.Position;
            bw.Write(Encoding.Default.GetBytes(Material));
            bw.Write(0);
            bw.Write(Encoding.Default.GetBytes("Generated By GEEKiDoS"));

            bw.BaseStream.Seek(0, SeekOrigin.Begin);
            bw.Write(nameOffset);
            bw.BaseStream.Seek(12, SeekOrigin.Begin);
            bw.Write(matOffset);
        }
    }

    public partial class Glyph: IComparable<Glyph>
    {
        [JsonProperty("letter")]
        public ushort Letter { get; set; }

        [JsonProperty("dx")]
        public sbyte Dx { get; set; }

        [JsonProperty("pixelHeight")]
        public sbyte PixelHeight { get; set; }

        [JsonProperty("pixelWidth")]
        public sbyte PixelWidth { get; set; }

        [JsonProperty("x0")]
        public sbyte X0 { get; set; }

        [JsonProperty("y0")]
        public sbyte Y0 { get; set; }

        [JsonProperty("s0")]
        public float S0 { get; set; }

        [JsonProperty("t0")]
        public float T0 { get; set; }

        [JsonProperty("s1")]
        public float S1 { get; set; }

        [JsonProperty("t1")]
        public float T1 { get; set; }

        public int CompareTo(Glyph other) => Letter.CompareTo(other.Letter);
    }
}
